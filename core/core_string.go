// Code generated by "stringer -type PipeMode,PerformanceFlavor,PortDirection -output core_string.go"; DO NOT EDIT

package core

import "fmt"

const _PipeMode_name = "PIPE_DIRECTPIPE_CHANNELPIPE_ROUTINE"

var _PipeMode_index = [...]uint8{0, 11, 23, 35}

func (i PipeMode) String() string {
	if i < 0 || i >= PipeMode(len(_PipeMode_index)-1) {
		return fmt.Sprintf("PipeMode(%d)", i)
	}
	return _PipeMode_name[_PipeMode_index[i]:_PipeMode_index[i+1]]
}

const (
	_PerformanceFlavor_name_0 = "FlavorBetterLatencyFlavorBetterThroughput"
	_PerformanceFlavor_name_1 = "FlavorBetterFootprint"
)

var (
	_PerformanceFlavor_index_0 = [...]uint8{0, 19, 41}
	_PerformanceFlavor_index_1 = [...]uint8{0, 21}
)

func (i PerformanceFlavor) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _PerformanceFlavor_name_0[_PerformanceFlavor_index_0[i]:_PerformanceFlavor_index_0[i+1]]
	case i == 4:
		return _PerformanceFlavor_name_1
	default:
		return fmt.Sprintf("PerformanceFlavor(%d)", i)
	}
}

const _PortDirection_name = "DIRECTION_FORWARDDIRECTION_BACKWARD"

var _PortDirection_index = [...]uint8{0, 17, 35}

func (i PortDirection) String() string {
	if i < 0 || i >= PortDirection(len(_PortDirection_index)-1) {
		return fmt.Sprintf("PortDirection(%d)", i)
	}
	return _PortDirection_name[_PortDirection_index[i]:_PortDirection_index[i+1]]
}
